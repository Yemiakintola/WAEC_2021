# -*- coding: utf-8 -*-
"""streamlit_waec_2021.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11KLHKeoPnKDsN680OgfuSQqH1RYoNpSc
"""

pip install streamlit

import streamlit as st
import pandas as pd
import joblib
import numpy as np

# Load the trained model
try:
    best_model = joblib.load('best_model.pkl')
except FileNotFoundError:
    st.error("Error: 'best_model.pkl' not found. Please make sure the model file exists in the same directory as the app.")
    st.stop()
except Exception as e:
    st.error(f"An error occurred while loading the model: {e}")
    st.stop()

# Create the Streamlit app
st.title("WAEC Result Prediction App")
st.write("Predict the total number of students with 5 credits and above, including English and Mathematics.")

# --- Suggested Change Start ---
# Define or load the feature names expected by the model.
# This is a placeholder. You need to replace this with how you actually get the feature names.
# For example, if you saved the column names in a file named 'feature_names.pkl':
# try:
#     expected_feature_names = joblib.load('feature_names.pkl')
# except FileNotFoundError:
#     st.error("Error: 'feature_names.pkl' not found. Cannot determine expected features.")
#     st.stop()
# except Exception as e:
#     st.error(f"An error occurred while loading feature names: {e}")
#     st.stop()

# Alternatively, if your model object 'best_model' has an attribute containing feature names:
# try:
#     expected_feature_names = best_model.feature_names_in_ # This attribute name can vary based on the model type
# except AttributeError:
#     st.error("Error: Could not get feature names from the model.")
#     st.stop()

# As a temporary fix, if you know the column names, you can list them here:
# Replace this list with your actual feature names.
expected_feature_names = ['STATE_ABIA', 'STATE_ADAMAWA', 'STATE_AKWA IBOM', 'STATE_ANAMBRA', 'STATE_BAUCHI', 'STATE_BAYELSA', 'STATE_BENUE', 'STATE_BORNO', 'STATE_CROSS RIVER', 'STATE_DELTA', 'STATE_EBONYI', 'STATE_EDO', 'STATE_EKITI', 'STATE_ENUGU', 'STATE_GOMBE', 'STATE_IMO', 'STATE_JIGAWA', 'STATE_KADUNA', 'STATE_KANO', 'STATE_KATSINA', 'STATE_KEBBI', 'STATE_KOGI', 'STATE_KWARA', 'STATE_LAGOS', 'STATE_NASARAWA', 'STATE_NIGER', 'STATE_OGUN', 'STATE_ONDO', 'STATE_OSUN', 'STATE_OYO', 'STATE_PLATEAU', 'STATE_RIVERS', 'STATE_SOKOTO', 'STATE_TARABA', 'STATE_YOBE', 'STATE_ZAMFARA', 'TOTAL ENROLLED', 'MALES', 'FEMALES', 'ABOVE 21', 'BELOW 16', '17 TO 20', 'TOTAL WITH 5 CREDITS']
# --- Suggested Change End ---


# Create input fields for the features
input_data = {}
# Use the expected_feature_names instead of X_train.columns
for col in expected_feature_names:
    if col.startswith('STATE_'):
        input_data[col] = st.selectbox(col, [0, 1])  # Binary choices for state features
    else:
        input_data[col] = st.number_input(col, value=0.0)  # Number inputs for other features

# Prediction logic
if st.button("Predict"):
    try:
        # Create a DataFrame from the user input
        input_df = pd.DataFrame([input_data])

        # Ensure the input features match the trained model
        # Compare with the expected feature names
        if list(input_df.columns) != list(expected_feature_names):
            st.error("Error: Input features do not match the trained model. Please check your input.")
            st.stop()

        # Make prediction
        prediction = best_model.predict(input_df)
        st.success(f"Predicted Total: {prediction[0]:.0f}")

    except Exception as e:
        st.error(f"An error occurred during prediction: {e}")